/*
 * Author: Landon Fuller <landonf@plausiblelabs.com>
 *
 * Copyright (c) 2008-2013 Plausible Labs Cooperative, Inc.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

package plcrash;
option java_package = "coop.plausible.crashreporter";
option java_outer_classname = "CrashReport_pb";

/* A crash report */
message CrashReport_V2 {
    /* Known report types. */
    enum ReportType {
        /* Unknown report type. This will never be specified in a generated report. */
        UNKNOWN = 0;

        /* A report generated due to a fatal signal or machine exception. */
        CRASH = 1;

        /* A report generated due to an unhandled language-level Objective-C exception. */
        OBJC_EXCEPTION = 2;

        /* A report generated on a running process, where no crash occured. */
        LIVE = 3;
    }

    /** The report type. */
    required ReportType type = 1 [default = UNKNOWN];

    /* Time that this report was generated (as seconds since UNIX epoch). 0 if the time
     * is unknown or can not be determined. */
    required uint64 timestamp = 2;



    /* Application info */
    message ApplicationInfo {
        /* Unique application identifier */
        required string identifier = 1;

        /* Application version string */
        required string version = 2;
    }

    /* Application identifiers. These may not be available for all applications. */
    optional ApplicationInfo application_info = 3;



    /* OS Information */
    message OperatingSystem {
        /* Known operating system types */
        enum OperatingSystem {                    
            /* Unknown operating system. */
            UNKNOWN = 0;

            /* Mac OS X */
            MAC_OS_X = 1;

            /* iPhone OS */
            IPHONE_OS = 2;

            /* iPhone Simulator (Mac OS X w/ simulator runtime environment) */
            IPHONE_SIMULATOR = 3;
        }

        /* Operating system */
        optional OperatingSystem type = 1 [default = UNKNOWN];

        /* OS version */
        required string version = 2;

        /* OS build number (eg, 10J869) */
        optional string build = 5;
    }

    required OperatingSystem os = 10;



    /*
     * Processor information
     */
    message Processor {
        /* 
         * CPU Type Encodings
         *
         * The wire format maintains support for multiple CPU type encodings; it is expected that different operating
         * systems may target different processors, and the reported CPU type and subtype information may not be
         * easily or directly expressed when not using the vendor's own defined types.
         *
         * Currently, only Apple Mach CPU type/subtype information is supported by the wire protocol. These types are
         * stable, intended to be encoded in Mach-O files, and are defined in mach/machine.h on Mac OS X.
         *
         * Implementations must gracefully handle the addition of unknown type encodings.
         */
        enum TypeEncoding {
            /* Unknown processor type encoding. */
            UNKNOWN = 0;

            /* Apple Mach-defined processor types. */
            MACH = 1;
        }

        /** The CPU type encoding that should be used to interpret cpu_type and cpu_subtype. This value is required. */
        optional TypeEncoding encoding = 1 [default = UNKNOWN];

        /** The CPU type. */
        required uint64 type = 2;

        /** The CPU subtype. */
        required uint64 subtype = 3;
    }



    /*
     * Host architecture information.
     */
    message Machine {    
        /* Hardware model (eg, MacBookPro6,1) */
        optional string model = 1;

        /* The host processor. */
        required Processor processor = 2;

        /*
        * The number of actual physical processor cores. Note that the number of active processors may be managed by the
        * operating system's power management system, and this value may not reflect the number of active
        * processors at the time of the crash. */
        required uint32 processor_count = 3;

        /* The number of logical processors.  Note that the number of active processors may be managed by the
        * operating system's power management system, and this value may not reflect the number of active
        * processors at the time of the crash.
        */
        required uint32 logical_processor_count = 4;
    }

    /* Host architecture information. */
    optional Machine machine = 11;



    /* Process Data. */ 
    message Process {
        /* Application process name */
        optional string name = 1;

        /* Application process ID */
        required uint64 pid = 2;

        /* Application process path */
        optional string path = 3;

        /* Application parent process name */
        optional string parent_name = 4;

        /* Application parent process ID */
        required uint64 parent_pid = 5;

        /** If false, the process is being run via process-level CPU emulation (such as Rosetta). If unknown, this
         * value must be ommitted. */
        optional bool native = 6;
    }
  
    /* The process info. */
    required Process process = 12;



}
